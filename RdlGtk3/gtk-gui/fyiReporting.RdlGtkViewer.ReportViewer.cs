
// This file has been generated by the GUI designer. Do not modify.
namespace fyiReporting.RdlGtk3
{
    public partial class ReportViewer
    {
        private global::Gtk.UIManager UIManager;

        private global::Gtk.Action refreshAction;

        private global::Gtk.Action saveAsAction;

        private global::Gtk.Action printAction;

        private global::Gtk.Action ZoomOutAction;

        private global::Gtk.Action ZoomInAction;

        private global::Gtk.ToggleAction errorsAction;

        private global::Gtk.Box vbox;

        private global::Gtk.Box hboxHeader;

        private global::Gtk.Toolbar toolbar;

        private global::Gtk.Box hbox;

        private global::Gtk.Box vboxParameters;

        private global::Gtk.Paned hpanedReport;

        private global::Gtk.ScrolledWindow scrolledwindowPages;

        private global::Gtk.Box vboxPages;

        private global::Gtk.ScrolledWindow scrolledwindowErrors;

        private global::Gtk.TextView textviewErrors;

        protected virtual void Build()
        {
            global::Gtk.Builder builder = new global::Gtk.Builder(null, "fyiReporting.RdlGtkViewer.ReportViewer.ui", null);
            builder.Autoconnect(this);

            this.UIManager = new global::Gtk.UIManager();
            global::Gtk.ActionGroup w2 = new global::Gtk.ActionGroup("Default");
            this.refreshAction = new global::Gtk.Action("refreshAction", null, null, "gtk-refresh");
            this.refreshAction.IsImportant = true;
            w2.Add(this.refreshAction, null);
            this.saveAsAction = new global::Gtk.Action("saveAsAction", global::Mono.Unix.Catalog.GetString("_Export"), global::Mono.Unix.Catalog.GetString("Export as PDF, CSV, ASP, HTML, MHTML, XML, Excel"), "gtk-save-as");
            this.saveAsAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Export");
            w2.Add(this.saveAsAction, null);
            this.printAction = new global::Gtk.Action("printAction", global::Mono.Unix.Catalog.GetString("_Print"), null, "gtk-print");
            this.printAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Print");
            w2.Add(this.printAction, null);
            this.ZoomOutAction = new global::Gtk.Action("ZoomOutAction", null, null, "gtk-zoom-out");
            this.ZoomOutAction.IsImportant = true;
            w2.Add(this.ZoomOutAction, null);
            this.ZoomInAction = new global::Gtk.Action("ZoomInAction", null, null, "gtk-zoom-in");
            this.ZoomInAction.IsImportant = true;
            w2.Add(this.ZoomInAction, null);
            this.errorsAction = new global::Gtk.ToggleAction("errorsAction", null, null, "gtk-dialog-warning");
            this.errorsAction.DrawAsRadio = true;
            this.errorsAction.IsImportant = true;
            this.errorsAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Show _Errors");
            this.errorsAction.VisibleHorizontal = false;
            w2.Add(this.errorsAction, null);
            this.UIManager.InsertActionGroup(w2, 0);
            this.WidthRequest = 0;
            this.HeightRequest = 0;
            this.Name = "fyiReporting.RdlGtkViewer.ReportViewer";

            // Container child fyiReporting.RdlGtkViewer.ReportViewer.Gtk.Container+ContainerChild
            this.vbox = (global::Gtk.Box)builder.GetObject("vbox");
            this.hboxHeader = (global::Gtk.Box)builder.GetObject("hboxHeader");
            this.toolbar = (global::Gtk.Toolbar)builder.GetObject("toolbar");
            this.hbox = (global::Gtk.Box)builder.GetObject("hbox");
            this.vboxParameters = (global::Gtk.Box)builder.GetObject("vboxParameters");
            this.hpanedReport = (global::Gtk.Paned)builder.GetObject("hpanedReport");
            this.scrolledwindowPages = (global::Gtk.ScrolledWindow)builder.GetObject("scrolledwindowPages");
            this.vboxPages = (global::Gtk.Box)builder.GetObject("vboxPages");
            this.scrolledwindowErrors = (global::Gtk.ScrolledWindow)builder.GetObject("scrolledwindowErrors");
            this.textviewErrors = (global::Gtk.TextView)builder.GetObject("textviewErrors");

            this.Add(this.vbox);
            if ((this.Child != null))
            {
                this.Child.ShowAll();
            }

            this.refreshAction.Activated += new global::System.EventHandler(this.OnRefreshActionActivated);
            this.saveAsAction.Activated += new global::System.EventHandler(this.OnPdfActionActivated);
            this.printAction.Activated += new global::System.EventHandler(this.OnPrintActionActivated);
            this.ZoomOutAction.Activated += new global::System.EventHandler(this.OnZoomOutActionActivated);
            this.ZoomInAction.Activated += new global::System.EventHandler(this.OnZoomInActionActivated);
            this.hpanedReport.SizeAllocated += new global::Gtk.SizeAllocatedHandler(this.OnHpanedReportSizeAllocated);
        }
    }
}
